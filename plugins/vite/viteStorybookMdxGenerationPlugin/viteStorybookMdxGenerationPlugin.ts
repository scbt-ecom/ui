import type { Plugin } from 'vite'
import { generateDocs } from './utils'

/**
 * Плагин для автоматической генерации документации
 * основанной на историях Storybook
 *
 * @example
 * // Component.stories.ts
 * "use docs"; // mark these stories to generate docs of each its stories
 *
 * import type { Meta, StoryObj } from "@storybook/react";
 * import { Button } from "@app/common";
 *
 * const meta = {
 *   title: "BASE/Button",
 *   component: Button,
 *   parameters: {
 *     layout: "centered",
 *   },
 *   args: {
 *     children: "Button",
 *   },
 * } satisfies Meta<typeof Button>;
 *
 * export default meta;
 *
 * type Story = StoryObj<typeof meta>;
 *
 * // each story will export and generated by its content
 * // also you can use js-doc for explain your component deeply
 * export const Default: Story = {
 *   args: {},
 * };
 *
 * @example
 * // it will generate this file
 * // Component.docs.mdx
 *
 * import { Meta, Canvas, Controls } from "@storybook/blocks";
 * import * as ButtonStories from "/path/to/story/Component.stories";
 *
 * # Button
 *
 * <Meta of={ButtonStories} />
 *
 * ## Button Default
 *
 * And js-doc will render on each story here
 *
 * <Canvas of={ButtonStories.Default} meta={ButtonStories} />
 * <Controls of={ButtonStories.Default} />
 *
 * @param storiesPath путь до корневой директории storybook
 * @typeParam `storiesPath` - `string | string[]`
 */
export const viteStorybookMdxGenerationPlugin = (storiesPath: string | string[] = ['src', 'stories']): Plugin => {
  return {
    name: 'vite-storybook-mdx-generation-plugin',
    enforce: 'pre',
    configureServer: (server) => {
      generateDocs(storiesPath)

      server.watcher.on('change', (path) => {
        if (path.match(/\.stories\.(ts|tsx)$/)) {
          generateDocs(storiesPath)
        }
      })
    }
  }
}
