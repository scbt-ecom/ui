image: centos:latest

stages:
  - test
  - build
  - review
  - hook

test:
  stage: test
  image: node:10
  script:
    - sed -i '/rimraf node_modules/d' ./package.json
    - npm i || true
    - npm run build-storybook || true
    - npm test || true
  only:
    - ci-cd-test
  artifacts:
    paths:
      - storybook-static/
    expire_in: 1 hrs

build:
  stage: build
  image: docker:stable
  script:
    - build
  variables:
    DOCKER_DRIVER: overlay2
  dependencies:
    - test
  only:
    - ci-cd-test
    #- dev
    #- test

review:
  stage: review
  image: harbor.sovcombank.group/gitlab-runners-images/alpine-with-tools:latest
  script:
    - set_k8s
    - deploy
  only:
    - ci-cd-test
    #- ci-cd-test
    #- dev
    #- test

delete:
  stage: review
  image: harbor.sovcombank.group/gitlab-runners-images/alpine-with-tools:latest
  script:
    - set_k8s
    - delete
  when: manual
  only:
    - ci-cd-test
    #- ci-cd-test
    #- dev
    #- test

hook_to_projects:
  stage: hook
  image: centos:latest
  script:
    - if [[ -n $HOOK_PRJS ]]; then send_hook; else exit 0; fi
  only:
    - ci-cd-test
    #- ci-cd-test
    #- dev
    #- test

.auto_devops: &auto_devops |
  TRACE=1
  [[ "$TRACE" ]] && set -x

  echo "Экспортируем переменные окружения из файла .ci_env, если данные переменные не определены." \
  $'\n'"=========================================================================================="$'\n'
  [[ "$HOOK_PRJS" != "disable" ]] && echo "Переменные не определены, экспортируем..." && source .ci_env && \
  export $(grep -v '^#' .ci_env | cut -d= -f1)
  #export $(grep -v '^#\|HOOK_PRJS' .ci_env | xargs)
  
  export CI_APPLICATION_REPOSITORY=$(echo $CI_REGISTRY | sed -r 's:^([^/]*/){2}::')/$(echo $CI_PROJECT_PATH | sed -r 's:([a-zA-Z0-9])[^/]*/:\1-:g' | \
  sed 's/[^a-zA-Z0-9]/-/g' | awk '{print tolower($0)}')/$CI_PROJECT_NAME-$ENVRM
  export CI_APPLICATION_TAG="latest"

  function build() {
    echo "Создаем Docker-образ приложения. \
    =========================================================================================="
    docker build -t "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}" .

    echo "Загружаем Docker-образ приложения в Registry. \
    =========================================================================================="
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY" &> /dev/null
      echo ""
    fi
    docker push "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}"
    echo ""
  }

  function set_k8s() {
    echo "Настраиваем kubectl для доступа к кластеру Kubernetes. \
    =========================================================================================="
    kubectl config set-cluster $K8S_CLUSTER --server="$K8S_URL" --insecure-skip-tls-verify &> /dev/null
    kubectl config set-credentials admin --token="$K8S_TOKEN" &> /dev/null
    kubectl config set-context default-context --cluster=$K8S_CLUSTER --user=admin &> /dev/null
    kubectl config use-context default-context &> /dev/null
  }

  function deploy() {
    echo "Устанавливаем (или обновляем) tiller. \
    =========================================================================================="
    helm init --upgrade --tiller-namespace ${K8S_NAMESPACE_BASE} --history-max 10 --service-account tiller-account
    sleep 30

    echo "Устанавливаем релиз Helm. \
    =========================================================================================="
    helm upgrade --install ${K8S_NAMESPACE_BASE}-${ENVRM} ./helm --namespace ${K8S_NAMESPACE_BASE}-${ENVRM} \
    --set image.repository="${CI_APPLICATION_REPOSITORY}" --set image.tag="${CI_APPLICATION_TAG}" \
    --set ingress.host="${ENVRM}-kuber.sovcombank.group" --set ingress.location="ecom-${CI_PROJECT_NAME}" \
    --tiller-namespace ${K8S_NAMESPACE_BASE} --timeout 300 --reset-values
    # вернуть параметр --wait
  }

  function delete() {
    echo "Удаляем релиз Helm. \
    =========================================================================================="
    helm delete ${K8S_NAMESPACE_BASE}-${ENVRM} --tiller-namespace ${K8S_NAMESPACE_BASE} --purge --timeout 600
  }

  function set_hook_prj_path() {
    echo "Получаем полный путь проекта, подготовленный для запросов к REST API Gitlab." \
    $'\n'"=========================================================================================="$'\n'
    export HOOK_PROJECT_PATH=$(echo $PROJECT_URL | sed 's:\(.*\)\(.git\)$:\1:' | sed 's:^\([^/]*/\)\{3\}::' | sed 's:\/:%2F:g')
  }

  function send_hook() {
    echo "Устанавливаем триггер выполнения pipeline связанных проектов." \
    $'\n'"=========================================================================================="$'\n'
    yum install epel-release -y -q &> /dev/null
    yum install jq -y -q &> /dev/null

    for PROJECT_URL in $HOOK_PRJS
    do
      if [[ $(curl -k -LI $PROJECT_URL -w '%{http_code}\n' -s -o /dev/null) != 200 ]]
      then
        echo "Project URL $PROJECT_URL not valid"
        exit 1
      fi
      set_hook_prj_path

      echo "Удаляем все trigger tokens аккаунта Gitlab, если есть, и устанавливаем новый." \
      $'\n'"=========================================================================================="$'\n'
      curl -s -H "PRIVATE-TOKEN: $SA_TOKEN" \
      $CI_API_V4_URL/projects/$HOOK_PROJECT_PATH/triggers | \
      jq -c '.[] | select( .description | contains("ci-cd-trigger"))' | jq -r .id | \
      while read line; do curl -s -X DELETE -H "PRIVATE-TOKEN: $SA_TOKEN" \
      $CI_API_V4_URL/projects/$HOOK_PROJECT_PATH/triggers/$line; done
      export TRIGGER_TOKEN=$(curl -s -X POST -H "PRIVATE-TOKEN: $SA_TOKEN" -F description=ci-cd-trigger \
      $CI_API_V4_URL/projects/$HOOK_PROJECT_PATH/triggers | jq -r .token)

      echo "Запускаем выполнение pipline связанных проектов." \
      $'\n'"=========================================================================================="$'\n'
      curl -s -X POST \
      -F "token=$TRIGGER_TOKEN" \
      -F "ref=$HOOK_BRANCH" \
      -F "variables[ENVRM]=$ENVRM" \
      -F "variables[HOOK_PRJS]=disable" \
      $CI_API_V4_URL/projects/$HOOK_PROJECT_PATH/trigger/pipeline
    done
  }

before_script:
  - *auto_devops
